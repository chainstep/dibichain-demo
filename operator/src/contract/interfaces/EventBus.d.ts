/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EventBusInterface extends ethers.utils.Interface {
  functions: {
    "broadcastNewProduct((string,string,string,string,string,string))": FunctionFragment;
    "broadcastProductDetailsRequest((string,string,string))": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "broadcastNewProduct",
    values: [
      {
        uid: string;
        id: string;
        name: string;
        Type: string;
        number: string;
        hash: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "broadcastProductDetailsRequest",
    values: [{ uid: string; pubKey: string; algorithm: string }]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "broadcastNewProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "broadcastProductDetailsRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "NewProduct(string,tuple)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProductDetailsRequest(string,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewProduct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductDetailsRequest"): EventFragment;
}

export type NewProductEvent = TypedEvent<
  [
    string,
    [string, string, string, string, string, string] & {
      uid: string;
      id: string;
      name: string;
      Type: string;
      number: string;
      hash: string;
    }
  ] & {
    uid: string;
    productData: [string, string, string, string, string, string] & {
      uid: string;
      id: string;
      name: string;
      Type: string;
      number: string;
      hash: string;
    };
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProductDetailsRequestEvent = TypedEvent<
  [
    string,
    [string, string, string] & {
      uid: string;
      pubKey: string;
      algorithm: string;
    }
  ] & {
    uid: string;
    productDetailsRequestData: [string, string, string] & {
      uid: string;
      pubKey: string;
      algorithm: string;
    };
  }
>;

export class EventBus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EventBusInterface;

  functions: {
    broadcastNewProduct(
      productData: {
        uid: string;
        id: string;
        name: string;
        Type: string;
        number: string;
        hash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    broadcastProductDetailsRequest(
      productDetailsRequestData: {
        uid: string;
        pubKey: string;
        algorithm: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  broadcastNewProduct(
    productData: {
      uid: string;
      id: string;
      name: string;
      Type: string;
      number: string;
      hash: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  broadcastProductDetailsRequest(
    productDetailsRequestData: {
      uid: string;
      pubKey: string;
      algorithm: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    broadcastNewProduct(
      productData: {
        uid: string;
        id: string;
        name: string;
        Type: string;
        number: string;
        hash: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    broadcastProductDetailsRequest(
      productDetailsRequestData: {
        uid: string;
        pubKey: string;
        algorithm: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewProduct(string,tuple)"(
      uid?: string | null,
      productData?: null
    ): TypedEventFilter<
      [
        string,
        [string, string, string, string, string, string] & {
          uid: string;
          id: string;
          name: string;
          Type: string;
          number: string;
          hash: string;
        }
      ],
      {
        uid: string;
        productData: [string, string, string, string, string, string] & {
          uid: string;
          id: string;
          name: string;
          Type: string;
          number: string;
          hash: string;
        };
      }
    >;

    NewProduct(
      uid?: string | null,
      productData?: null
    ): TypedEventFilter<
      [
        string,
        [string, string, string, string, string, string] & {
          uid: string;
          id: string;
          name: string;
          Type: string;
          number: string;
          hash: string;
        }
      ],
      {
        uid: string;
        productData: [string, string, string, string, string, string] & {
          uid: string;
          id: string;
          name: string;
          Type: string;
          number: string;
          hash: string;
        };
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProductDetailsRequest(string,tuple)"(
      uid?: string | null,
      productDetailsRequestData?: null
    ): TypedEventFilter<
      [
        string,
        [string, string, string] & {
          uid: string;
          pubKey: string;
          algorithm: string;
        }
      ],
      {
        uid: string;
        productDetailsRequestData: [string, string, string] & {
          uid: string;
          pubKey: string;
          algorithm: string;
        };
      }
    >;

    ProductDetailsRequest(
      uid?: string | null,
      productDetailsRequestData?: null
    ): TypedEventFilter<
      [
        string,
        [string, string, string] & {
          uid: string;
          pubKey: string;
          algorithm: string;
        }
      ],
      {
        uid: string;
        productDetailsRequestData: [string, string, string] & {
          uid: string;
          pubKey: string;
          algorithm: string;
        };
      }
    >;
  };

  estimateGas: {
    broadcastNewProduct(
      productData: {
        uid: string;
        id: string;
        name: string;
        Type: string;
        number: string;
        hash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    broadcastProductDetailsRequest(
      productDetailsRequestData: {
        uid: string;
        pubKey: string;
        algorithm: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    broadcastNewProduct(
      productData: {
        uid: string;
        id: string;
        name: string;
        Type: string;
        number: string;
        hash: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    broadcastProductDetailsRequest(
      productDetailsRequestData: {
        uid: string;
        pubKey: string;
        algorithm: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
