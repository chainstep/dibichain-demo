name: deploy company backend

on:
  workflow_dispatch:

# You also need to add a RUNNER_PRIVATE_KEY action secret
# and fill it with an ssh private key of the server user
env:
  # project dir
  SOURCE_DIR: company-backend
  
  # server config
  SERVER_DOMAIN: logistex.weltenmut.de
  SERVER_USER: dibichain
  SERVER_FOLDER: dibichain
  
  # docker config
  IMAGE_NAME: company-backend
  IMAGE_TAG: demo-latest
  REGISTRY_NAME: ghcr.io/chainstep/dibichain
  PROJECT_NAME: dibichain
  COMPOSE_FILE: docker-compose-demo.yml

jobs:
  test-project:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2 
        with:
          node-version: 16

      - name: Install dependencies
        run: cd ./${{ env.SOURCE_DIR }} && yarn install
    
      - name: Lint project
        run: cd ./${{ env.SOURCE_DIR }} && yarn lint

      - name: Run tests
        run: cd ./${{ env.SOURCE_DIR }} && yarn test
      
      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-dependencies
        with:
          path: ./${{ env.SOURCE_DIR }}/node_modules
          key: ${{ github.sha }}

  build-image:
    runs-on: ubuntu-latest
    needs:
      - test-project
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2 
        with:
          node-version: 16
      
      - name: Restore dependencies
        uses: actions/cache@v2
        id: cache-dependencies
        with:
          path: ./${{ env.SOURCE_DIR }}/node_modules
          key: ${{ github.sha }}

      - name: Build project
        run: cd ./${{ env.SOURCE_DIR }} && yarn build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      
      - name: Set up docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          file: ./${{ env.SOURCE_DIR }}/docker/Dockerfile
          context: ./${{ env.SOURCE_DIR }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
      
  deploy-image:
    runs-on: ubuntu-latest
    needs:
      - build-image
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare runner
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan ${{ env.SERVER_DOMAIN }} >> ~/.ssh/known_hosts
          touch ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.RUNNER_PRIVATE_KEY }}" >> ~/.ssh/id_ed25519
          echo "SSH_DOMAIN=${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }}" >> $GITHUB_ENV &&
          echo "SSH_SERVER_FOLDER=${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }}:${{ env.SERVER_FOLDER }}" >> $GITHUB_ENV

      - name: Prepare server
        run: |
          ssh -t ${{ env.SSH_DOMAIN }} "mkdir -p ${{ env.SERVER_FOLDER }}/docker"
          scp ./server-config/${{ env.COMPOSE_FILE }} ${{ env.SSH_SERVER_FOLDER}}/docker

      - name: Deploy image
        run: |
          ssh -t ${{ env.SSH_DOMAIN }} "
            sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            cd ${{ env.SERVER_FOLDER }}/docker
            sudo docker pull ghcr.io/chainstep/blktrc/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            sudo docker-compose -f ${{ env.COMPOSE_FILE }} -p ${{ env.PROJECT_NAME }} up -d --remove-orphans
            sudo rm -f /root/.docker/config.json
          "