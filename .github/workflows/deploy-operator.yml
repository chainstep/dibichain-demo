name: deploy operator

on:
  workflow_dispatch:

# You also need to add a RUNNER_PRIVATE_KEY action secret
# and fill it with an ssh private key of the server user
env:
  # github config
  DEPLOY_BRANCH: main

  # server config
  SERVER_DOMAIN: api.operator.dibichain.de
  SERVER_USER: dibichain
  SERVER_FOLDER: dibichain-operator
  
  # docker config
  IMAGE_NAME: operator
  IMAGE_TAG: demo-latest
  REGISTRY_NAME: ghcr.io/chainstep/dibichain
  PROJECT_NAME: dibichain-operator
  COMPOSE_FILE: docker-compose-operator.yml
  COMPOSE_FOLDER: deploy-config

jobs: 
  deploy-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check branch
        run: |
          BRANCH=${GITHUB_REF#refs/heads/}
          if [ ${BRANCH} != ${{ env.DEPLOY_BRANCH }} ]; then
            echo "Action only works on branch: ${{ env.DEPLOY_BRANCH }}"
            exit 1
          fi

      - name: Prepare runner
        run: |
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          ssh-keyscan ${{ env.SERVER_DOMAIN }} >> ~/.ssh/known_hosts
          touch ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.RUNNER_PRIVATE_KEY }}" >> ~/.ssh/id_ed25519
          echo "SSH_DOMAIN=${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }}" >> $GITHUB_ENV &&
          echo "SSH_SERVER_FOLDER=${{ env.SERVER_USER }}@${{ env.SERVER_DOMAIN }}:${{ env.SERVER_FOLDER }}" >> $GITHUB_ENV

      - name: Prepare server
        run: |
          ssh -t ${{ env.SSH_DOMAIN }} "mkdir -p ${{ env.SERVER_FOLDER }}/docker"
          scp ./${{ env.COMPOSE_FOLDER }}/${{ env.COMPOSE_FILE }} ${{ env.SSH_SERVER_FOLDER}}/docker

      - name: Deploy
        run: |
          ssh -t ${{ env.SSH_DOMAIN }} "
            sudo docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            cd ${{ env.SERVER_FOLDER }}/docker
            sudo docker pull ${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            sudo docker-compose -f ${{ env.COMPOSE_FILE }} -p ${{ env.PROJECT_NAME }} up -d --remove-orphans
            sudo rm -f /root/.docker/config.json
          "